// Generated by CoffeeScript 1.8.0
var apiScheduleList, apiScheduleRoom, apiSnap, base64ToBlob, getBase64Image, getRooms, getSchedules, lastSchedules, loadImageData, rooms, roomsStatus, scheduleChanged, schedules, setBadge, showRoomNotification, showScheduleNotification;

schedules = [];

scheduleChanged = false;

lastSchedules = [];

rooms = [];

roomsStatus = {};

apiScheduleList = "http://douyu.sashi-con.info/api/list";

apiScheduleRoom = "http://douyu.sashi-con.info/api/room";

apiSnap = "http://douyu.sashi-con.info/snap";

loadImageData = function(imageSpec, callbacks) {
  var img, path;
  path = imageSpec.path;
  img = new Image();
  img.crossOrigin = 'anonymous';
  if (typeof callbacks.onerror === "function") {
    img.onerror = function() {
      callbacks.onerror({
        problem: "could_not_load",
        path: path
      });
    };
  }
  img.onload = function() {
    var canvas, canvas_context, e, heightScale, imageData, scaleFactor;
    canvas = document.createElement("canvas");
    if (img.width <= 0 || img.height <= 0) {
      callbacks.onerror({
        problem: "image_size_invalid",
        path: path
      });
      return;
    }
    scaleFactor = 1;
    if (imageSpec.width && imageSpec.width < img.width) {
      scaleFactor = imageSpec.width / img.width;
    }
    if (imageSpec.height && imageSpec.height < img.height) {
      heightScale = imageSpec.height / img.height;
      if (heightScale < scaleFactor) {
        scaleFactor = heightScale;
      }
    }
    canvas.width = img.width * scaleFactor;
    canvas.height = img.height * scaleFactor;
    canvas_context = canvas.getContext("2d");
    canvas_context.clearRect(0, 0, canvas.width, canvas.height);
    canvas_context.drawImage(img, 0, 0, canvas.width, canvas.height);
    try {
      imageData = canvas_context.getImageData(0, 0, canvas.width, canvas.height);
      if (typeof callbacks.oncomplete === "function") {
        callbacks.oncomplete(imageData.width, imageData.height, imageData.data.buffer);
      }
    } catch (_error) {
      e = _error;
      if (typeof callbacks.onerror === "function") {
        callbacks.onerror({
          problem: "data_url_unavailable",
          path: path
        });
      }
    }
  };
  img.src = path;
};

base64ToBlob = function(base64Data, type) {
  var begin, byteArrays, byteCharacters, bytes, bytesLength, end, i, offset, sliceIndex, sliceSize, slicesCount;
  sliceSize = 1024;
  byteCharacters = atob(base64Data);
  bytesLength = byteCharacters.length;
  slicesCount = Math.ceil(bytesLength / sliceSize);
  byteArrays = new Array(slicesCount);
  sliceIndex = 0;
  while (sliceIndex < slicesCount) {
    begin = sliceIndex * sliceSize;
    end = Math.min(begin + sliceSize, bytesLength);
    bytes = new Array(end - begin);
    offset = begin;
    i = 0;
    while (offset < end) {
      bytes[i] = byteCharacters[offset].charCodeAt(0);
      ++i;
      ++offset;
    }
    byteArrays[sliceIndex] = new Uint8Array(bytes);
    ++sliceIndex;
  }
  return new Blob(byteArrays, {
    type: type
  });
};

getBase64Image = function(img) {
  var canvas, ctx;
  canvas = document.createElement("canvas");
  canvas.width = img.width;
  canvas.height = img.height;
  ctx = canvas.getContext("2d");
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
  return canvas.toDataURL("image/jpg");
};

setBadge = function(text) {
  return chrome.browserAction.setBadgeText({
    text: text
  });
};

showScheduleNotification = function() {
  var items, options;
  items = schedules.map(function(s) {
    var start;
    start = s.end.split('ï½ž')[0];
    return {
      title: "" + s.begin + " " + start,
      message: s.description
    };
  });
  options = {
    type: "list",
    iconUrl: 'images/icon89.png',
    title: 'douyu schedule updated',
    message: 'happy happy harurupi~',
    items: items
  };
  return chrome.notifications.create("6666", options, function(notificationId) {});
};

showRoomNotification = function(room) {
  var cbk, img;
  cbk = {
    oncomplete: function(width, height, data) {
      return console.log(width);
    }
  };
  img = new Image();
  img.crossOrigin = 'anonymous';
  img.src = room.room_src.replace("http://staticlive.douyutv.com/upload/web_pic", apiSnap);
  return img.onload = function(data) {
    var imgData, options;
    imgData = getBase64Image(img);
    options = {
      type: "image",
      iconUrl: 'images/icon89.png',
      title: "" + room.room_name,
      imageUrl: imgData,
      message: 'happy happy harurupi~'
    };
    return chrome.notifications.create("", options, function(notificationId) {});
  };
};

getSchedules = function() {
  var request;
  request = new XMLHttpRequest();
  request.open("GET", apiScheduleList, true);
  request.onload = function() {
    if (request.status >= 200 && request.status < 400) {
      schedules = JSON.parse(request.responseText);
      if (JSON.stringify(schedules) === JSON.stringify(lastSchedules)) {

      } else {
        setBadge('!');
        showScheduleNotification();
      }
      lastSchedules = schedules;
    } else {

    }
  };
  request.onerror = function() {};
  return request.send();
};

getRooms = function() {
  var request;
  request = new XMLHttpRequest();
  request.open("GET", apiScheduleRoom, true);
  request.onload = function() {
    var r, _i, _len;
    if (request.status >= 200 && request.status < 400) {
      rooms = JSON.parse(request.responseText);
      for (_i = 0, _len = rooms.length; _i < _len; _i++) {
        r = rooms[_i];
        if (roomsStatus[r.room_id] === r.show_status) {

        } else if (r.show_status === 1) {
          showRoomNotification(r);
        }
        roomsStatus[r.room_id] = r.show_status;
      }
    }
  };
  request.onerror = function() {};
  return request.send();
};

(function() {
  console.log("background loaded");
  setInterval(getSchedules, 5000);
  return setInterval(getRooms, 5000);
})();
